@startuml
'https://plantuml.com/sequence-diagram
title SellCommand Sequence Diagram

skinparam style strictuml
participant ":SellParser"
":SellParser" -> ":SellCommand"**:SellCommand()
activate ":SellCommand"
":SellCommand" --> ":SellParser"
deactivate ":SellCommand"
":SellParser" -> ":SellCommand": run()

group sd Deduct Quantity of the Item
    activate ":SellCommand"
    ":SellCommand"->":SellCommand": sellItem()
    activate ":SellCommand" #Cyan
    ref over ":SellCommand": Retrieve Item from \n Hashmap and keep \n track of previous Quantity Value.
    ":SellCommand" -> ":SellCommand": checkSellCommandLength()
    activate ":SellCommand" #Green

    alt Command Length != 2
    ref over ":SellCommand": Handle MissingParameters \n Exception
    end


    activate ":SellCommand"
    ":SellCommand" --> ":SellCommand"
    deactivate ":SellCommand"
    ":SellCommand" -> ":SellCommand": updateItemQuantity()
    activate ":SellCommand" #Green

    alt Quantity Deducted > 0 && Quantity Deducted < Current Quantity
    ref over ":SellCommand"
    Update the Quantity of Item if user input is valid
    end
    else Quantity Deducted > Current Quantity || Quantity Deducted <= 0
    ref over ":SellCommand": Handle SellErrorException
    end
    ":SellCommand" --> ":SellCommand"
    deactivate ":SellCommand"
    ":SellCommand" --> ":SellCommand"
    deactivate ":SellCommand"

    ":SellCommand"->":SellCommand": handleTrie()
    activate ":SellCommand" #Cyan
    ref over ":SellCommand": Update Inventory Data Structure
    ":SellCommand"-->":SellCommand"
    deactivate ":SellCommand"

    alt Valid Inputs
        ":SellCommand" -> "<<class>>\nUI": printSellDetails()
        activate "<<class>>\nUI"
        ref over "<<class>>\nUI": Print Sell Message
        "<<class>>\nUI"-->":SellCommand"
        deactivate "<<class>>\nUI"
    else Item Does Not Exist
        ":SellCommand" -> "<<class>>\nUI": printItemNotFound()
        activate "<<class>>\nUI"
        ref over "<<class>>\nUI": Print Error Message
        "<<class>>\nUI"-->":SellCommand"
        deactivate "<<class>>\nUI"
    else Missing Input Parameters
        ":SellCommand" -> "<<class>>\nUI": printInvalidSellCommand()
        activate "<<class>>\nUI"
        ref over "<<class>>\nUI": Print Error Message
        "<<class>>\nUI"-->":SellCommand"
        deactivate "<<class>>\nUI"
    else Invalid Input Parameters
        ":SellCommand" -> "<<class>>\nUI": printInvalidDeductQuantityInput()
        activate "<<class>>\nUI"
        ref over "<<class>>\nUI": Print Error Message
        "<<class>>\nUI"-->":SellCommand"
        deactivate "<<class>>\nUI"
    end
    ":SellCommand" -> "<<class>>\nSessionManager": writeSession()
    activate "<<class>>\nSessionManager"
    ref over "<<class>>\nSessionManager": Update CSV File
    "<<class>>\nSessionManager" --> ":SellCommand"
    deactivate "<<class>>\nSessionManager"
end
":SellCommand" --> ":SellParser"
destroy ":SellCommand"
@enduml