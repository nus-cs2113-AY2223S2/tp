@startuml
'https://plantuml.com/sequence-diagram
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor MODEL_COLOR
skinparam classBackgroundColor MODEL_COLOR
hide footbox

participant ":MainManager" as MainManager MODEL_COLOR
participant ":AtomicHabitManager" as AtomicHabitManager MODEL_COLOR
participant ":AtomicUi" as AtomicUi MODEL_COLOR
participant ":HabitList" as HabitList MODEL_COLOR
participant ":AddCommand" as AddCommand MODEL_COLOR
participant ":DeleteCommand" as DeleteCommand MODEL_COLOR
participant ":ListCommand" as ListCommand MODEL_COLOR
participant ":UpdateCommand" as UpdateCommand MODEL_COLOR
participant ":AtomicHabitCommand" as AtomicHabitCommand MODEL_COLOR
participant ":HelpCommand" as HelpCommand MODEL_COLOR
participant ":HomeCommand" as HomeCommand MODEL_COLOR
participant ":BadCommandException" as BadCommandException MODEL_COLOR

activate MainManager

create AtomicHabitManager
MainManager -> AtomicHabitManager
activate AtomicHabitManager

create AtomicUi
AtomicHabitManager -> AtomicUi
activate AtomicUi
AtomicUi --> AtomicHabitManager
deactivate AtomicUi

create HabitList
AtomicHabitManager -> HabitList
activate HabitList
HabitList --> AtomicHabitManager
deactivate HabitList

AtomicHabitManager --> MainManager
deactivate AtomicHabitManager

MainManager -> AtomicHabitManager : runEventDriver()
activate AtomicHabitManager

AtomicHabitManager -> AtomicHabitManager : greet()
activate AtomicHabitManager
AtomicHabitManager -> AtomicUi : getTextUi()
activate AtomicUi
AtomicUi --> AtomicHabitManager : AtomicUi
deactivate AtomicUi
AtomicHabitManager -> AtomicUi : printOutputMessage()
deactivate AtomicHabitManager

AtomicHabitManager -> AtomicHabitManager : runCommands()
activate AtomicHabitManager

    loop until isExit is true
        AtomicHabitManager -> AtomicHabitManager : getCommand()
        activate AtomicHabitManager
        AtomicHabitManager -> AtomicUi : getTextUi()
        activate AtomicUi
        AtomicUi --> AtomicHabitManager : AtomicUi
        deactivate AtomicUi
        AtomicHabitManager -> AtomicUi : getCommand()
        activate AtomicUi
        AtomicUi --> AtomicHabitManager : commandString
        deactivate AtomicUi
        deactivate AtomicHabitManager

        AtomicHabitManager -> AtomicHabitManager : getCommandFor(commandString)
        activate AtomicHabitManager
            alt commandString = add
                create AddCommand
                AtomicHabitManager -> AddCommand
                activate AddCommand
                AddCommand --> AtomicHabitManager : AddCommand(arguments, HabitList)
                deactivate AddCommand
            else commandString = delete
                create DeleteCommand
                AtomicHabitManager -> DeleteCommand
                activate DeleteCommand
                DeleteCommand --> AtomicHabitManager : DeleteCommand(arguments, HabitList)
                deactivate DeleteCommand
            else commandString = home
                create HomeCommand
                AtomicHabitManager -> HomeCommand
                activate HomeCommand
                HomeCommand --> AtomicHabitManager : HomeCommand(arguments, HabitList)
                deactivate HomeCommand
            else commandString = list
                create ListCommand
                AtomicHabitManager -> ListCommand
                activate ListCommand
                ListCommand --> AtomicHabitManager : ListCommand(arguments, HabitList)
                deactivate ListCommand
            else commandString = update
                create UpdateCommand
                AtomicHabitManager -> UpdateCommand
                activate UpdateCommand
                UpdateCommand --> AtomicHabitManager : UpdateCommand(arguments, HabitList)
                deactivate UpdateCommand
            else commandString = help
                create HelpCommand
                AtomicHabitManager -> HelpCommand
                activate HelpCommand
                HelpCommand --> AtomicHabitManager : HelpCommand(arguments, HabitList)
                deactivate HelpCommand
            else
                create BadCommandException
                AtomicHabitManager -> BadCommandException
                activate BadCommandException
                BadCommandException --> AtomicHabitManager
                deactivate BadCommandException
            end
        deactivate AtomicHabitManager
        AtomicHabitManager -> AtomicHabitCommand : execute()
    end
deactivate AtomicHabitManager

deactivate AtomicHabitManager
AtomicHabitManager --> MainManager

@enduml
