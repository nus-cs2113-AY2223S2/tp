@startuml
'https://plantuml.com/sequence-diagram
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor MODEL_COLOR
skinparam classBackgroundColor MODEL_COLOR
hide footbox


participant ":FooUi" as Ui MODEL_COLOR
participant ":FooManager" as Manager MODEL_COLOR
participant ":CommandParser" as CommandParser MODEL_COLOR
participant ":FooCommand" as FooCommand MODEL_COLOR

activate Manager


Manager -> Ui: getCommand()

note right of Manager
For brevity, we ignore the
inner workings of the
subclass of TextUi (FooUi)
on how it obtains user input
end note

activate Ui
Ui --> Manager: userInput
deactivate Ui


Manager -> CommandParser : parseUserInput(userInput)
activate CommandParser
CommandParser -> CommandParser : splitIntoCommands(userInput)
activate CommandParser
CommandParser --> CommandParser : String[] commands
deactivate CommandParser
    loop for each command in commands
        CommandParser -> CommandParser :getArgumentFromCommand(command)
        activate CommandParser
        CommandParser --> CommandParser : argument
        deactivate CommandParser
        CommandParser -> CommandParser :getPayloadFromCommand(command)
        activate CommandParser
        CommandParser --> CommandParser : payload
        deactivate CommandParser
    end
CommandParser --> Manager: HashMap<String,String> argumentPayload
deactivate CommandParser

Manager -> CommandParser: getMainArgument(userInput)
activate CommandParser
CommandParser --> Manager :mainArgument
deactivate CommandParser

note left of Manager
The following alt frame
represents a long switch-case
which matches <b>mainArgument</b>
to the correct command to be
constructed and executed.

For readability, only two
conditions are shown.
1. The case where it matches,
2. The case where it doesn't.
end note

alt mainArgument = FOO_COMMAND_KEYWORD
    create FooCommand
    Manager -> FooCommand : FooCommand(argumentPayload)
    activate FooCommand
    FooCommand --> Manager
    deactivate FooCommand
    Manager -> FooCommand: execute()
    activate FooCommand
    FooCommand --> Manager
    deactivate FooCommand
else default
    Manager -> Manager: printErrorFor()
    activate Manager
    Manager --> Manager
    deactivate Manager

end
@enduml