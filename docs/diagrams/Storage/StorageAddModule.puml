@startuml
'https://plantuml.com/sequence-diagram
-> ":AddModuleCommand" : command.execute()
activate ":AddModuleCommand"
":AddModuleCommand" -> ":ModuleStorage" : addModuleToModuleList(moduleToAdd)
activate ":ModuleStorage"
alt moduleToAdd == null
":ModuleStorage" -> "<<class>>\n:UI" : UI.printAddModuleFailureMessage()
activate "<<class>>\n:UI"
":ModuleStorage" <-- "<<class>>\n:UI"
deactivate "<<class>>\n:UI"
":AddModuleCommand"<-- ":ModuleStorage" : false

else doesModuleExist(moduleToAdd)
":ModuleStorage" -> "<<class>>\n:UI" : UI.printModAlreadyExistMessage()
activate "<<class>>\n:UI"
":ModuleStorage" <-- "<<class>>\n:UI"
deactivate "<<class>>\n:UI"
":AddModuleCommand"<-- ":ModuleStorage" : false

else
":ModuleStorage" -> ":ArrayList<Module>" : modules.add(moduleToAdd)
activate ":ArrayList<Module>"
":ModuleStorage" <-- ":ArrayList<Module>"
deactivate ":ArrayList<Module>"

":ModuleStorage" -> ":ModuleStorage": sortModulesAccordingToPrintingLength(modules)
activate ":ModuleStorage"
":ModuleStorage" --> ":ModuleStorage":
deactivate ":ModuleStorage"

":ModuleStorage" -> ":Module" : moduleToAdd.toString()
activate ":Module"
":ModuleStorage" <-- ":Module" : tempString:String
deactivate ":Module"

alt no exception
":ModuleStorage" -> ":ModuleStorage" : saveModuleToStorage(tempString)
activate ":ModuleStorage"
create ":FileWriter"
":ModuleStorage" -> ":FileWriter" : FileWriter(SAVED_MODULES_FILE_PATH, true)
activate ":FileWriter"
":ModuleStorage" <-- ":FileWriter"
deactivate ":FileWriter"
":ModuleStorage" -> ":ModuleStorage" : writeTaskPreparation(saveModuleString)
activate ":ModuleStorage"
":ModuleStorage" --> ":ModuleStorage" : tempString:String
deactivate ":ModuleStorage"
":ModuleStorage" -> ":FileWriter" : fw.write(tempString)
activate ":FileWriter"
":ModuleStorage" <-- ":FileWriter"
deactivate ":FileWriter"
":ModuleStorage" -> ":FileWriter" : fw.close()
activate ":FileWriter"
":ModuleStorage" <-- ":FileWriter"
deactivate ":FileWriter"
":ModuleStorage" --> ":ModuleStorage"
deactivate ":ModuleStorage"
else exception
":ModuleStorage" -> "<<class>>\n:UI" :  UI.printAddModuleFailureMessage()
activate "<<class>>\n:UI"
":ModuleStorage" <-- "<<class>>\n:UI"
deactivate "<<class>>\n:UI"
end
":AddModuleCommand" <-- ":ModuleStorage" : true
deactivate ":ModuleStorage"
end
alt isAddSuccessful == false
<-- ":AddModuleCommand"
else isAddSuccessful == true
":AddModuleCommand" -> "<<class>>\n:UI" : UI.printAddModMessage()
activate "<<class>>\n:UI"
":AddModuleCommand" <-- "<<class>>\n:UI"
deactivate "<<class>>\n:UI"
<-- ":AddModuleCommand"
deactivate ":AddModuleCommand"
end


@enduml