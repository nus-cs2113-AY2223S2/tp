@startuml

hide footbox

participant ExpenseCommand
participant Data
participant ExpenseAction
participant ExpenseUIResponse
actor User

 -> "ExpenseCommand":

activate "ExpenseCommand"
"ExpenseCommand" -> "ExpenseCommand": execute(data, ui)
activate  "ExpenseCommand"
"ExpenseCommand" -> "Data": getExpenses()
activate "Data"
return expenses: Expense[]
deactivate "Data"
"ExpenseCommand" -> "Data": getBudgets()
activate "Data"
return budgets: Budget[]
deactivate "Data"

"ExpenseCommand" -> "ExpenseAction" ** : (expenses,ui)
activate "ExpenseAction"

"ExpenseAction" -> "ExpenseUIResponse" ** : (ui)
activate "ExpenseUIResponse"
"ExpenseUIResponse" --> "ExpenseAction"
deactivate "ExpenseUIResponse"

return ExpenseAction: ExpenseAction
deactivate "ExpenseAction"


alt action is add
"ExpenseCommand" -> "ExpenseCommand": executeAddExpense(expenseAction, requiredParams, optionalParams, budgets)
activate "ExpenseCommand"
"ExpenseCommand" -> "ExpenseAction" : addExpense(expenseCategory, expenseName, expenseAmount, expenseDate, budgets)
activate "ExpenseAction"
"ExpenseAction" -> "ExpenseUIResponse" : printExpenseAddSuccessful(expense)
activate "ExpenseUIResponse"
"ExpenseUIResponse" -> User
return
return

deactivate "ExpenseCommand"

else action is del
"ExpenseCommand" -> "ExpenseCommand": executeDelExpense(expenseAction, requiredParams)
activate "ExpenseCommand"
"ExpenseCommand" -> "ExpenseAction" : deleteExpense(expenseId)
activate "ExpenseAction"
"ExpenseAction" -> "ExpenseUIResponse" : printExpenseDelSuccessful(deletedExpense)
activate "ExpenseUIResponse"
"ExpenseUIResponse" -> User
return
return

deactivate "ExpenseCommand"

else action is find
"ExpenseCommand" -> "ExpenseCommand": executeFindExpense(expenseAction, requiredParams)
activate "ExpenseCommand"
"ExpenseCommand" -> "ExpenseAction" : findExpenses(expenseName)
activate "ExpenseAction"
"ExpenseAction" -> "ExpenseUIResponse" : printFindExpenses(filteredExpenses)
activate "ExpenseUIResponse"
"ExpenseUIResponse" -> User
return
return

deactivate "ExpenseCommand"

else action is clear
"ExpenseCommand" -> "ExpenseCommand": executeClearExpense(expenseAction, optionalParams)
activate "ExpenseCommand"
"ExpenseCommand" -> "ExpenseAction" : clearExpenses(expenseFrom, expenseTo, expenseCategory)
activate "ExpenseAction"
"ExpenseAction" -> "ExpenseUIResponse" : printClearExpenses(expenseList)
activate "ExpenseUIResponse"
"ExpenseUIResponse" -> User
return
return

deactivate "ExpenseCommand"

else action is list
"ExpenseCommand" -> "ExpenseCommand": executeListExpense(expenseAction, optionalParams)
activate "ExpenseCommand"

alt expenseFromString is null && expenseToString is null
"ExpenseCommand" -> "ExpenseAction" : listExpenses(expenseCategory)
activate "ExpenseAction"
"ExpenseAction" -> "ExpenseUIResponse" : printListExpenses(previousExpenses, currentExpenses, category)
activate "ExpenseUIResponse"
"ExpenseUIResponse" -> User
return
return

else else
"ExpenseCommand" -> "ExpenseAction" : listExpensesRange(expenseFrom, expenseTo, expenseCategory)
activate "ExpenseAction"
"ExpenseAction" -> "ExpenseUIResponse" : printListExpensesRange(sortedExpenses, from, to, category)
activate "ExpenseUIResponse"
"ExpenseUIResponse" -> User
return
return
deactivate "ExpenseCommand"
end

else action is help
"ExpenseCommand" -> "ExpenseCommand": executeHelpExpense(expenseAction)
activate "ExpenseCommand"
"ExpenseCommand" -> "ExpenseAction" : expenseHelp()
activate "ExpenseAction"
"ExpenseAction" -> "ExpenseUIResponse" : printExpenseCommands()
activate "ExpenseUIResponse"
"ExpenseUIResponse" -> User
return
return

deactivate "ExpenseCommand"
end

"ExpenseCommand" -> "Data": exportData()
activate "Data"
return
deactivate "Data"

deactivate "ExpenseCommand"
 <-- "ExpenseCommand":
deactivate "ExpenseCommand"
@enduml