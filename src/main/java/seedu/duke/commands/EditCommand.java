package seedu.duke.commands;

import seedu.duke.exceptions.MissingParametersException;
import seedu.duke.exceptions.OutOfRangeException;
import seedu.duke.objects.Inventory;
import seedu.duke.objects.Item;
import seedu.duke.types.Types;
import seedu.duke.utils.SessionManager;
import seedu.duke.utils.Ui;
import seedu.duke.exceptions.EditErrorException;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;

/**
 * Represents the command to edit an item in the inventory.
 */
public class EditCommand extends Command {

    private static final String NAME_LABEL = "n/";
    private static final String QUANTITY_LABEL = "qty/";
    private static final String PRICE_LABEL = "p/";
    private static final String CATEGORY_LABEL = "c/";
    private static final String UPC_LABEL = "upc/";
    private static final String SPACING = " ";
    private static final String EMPTY_STRING = "";
    private static final int ZERO = 0;
    private static final int MIN_VALUE_RANGE = 0;
    private static final String NULL = "null";
    private final String[] editInfo;

    public EditCommand(Inventory inventory, String[] editInfo) {
        super(inventory);
        this.editInfo = editInfo;
    }

    /**
     * Searches the Hashmap to obtain the item required to be interacted with by the user.
     *
     * @param editInfo The array of strings that contain the user inputs.
     * @return Returns the variable of type "Item", which is the item in question to be interacted with by the user.
     * @throws EditErrorException Exception related to all errors generated by the edit command.
     */
    public Item retrieveItemFromHashMap(final String[] editInfo) throws EditErrorException {
        String upcCode = editInfo[0].replaceFirst(UPC_LABEL, EMPTY_STRING);
        if (!upcCodes.containsKey(upcCode)) {
            throw new EditErrorException();
        }
        return upcCodes.get(upcCode);
    }

    /**
     * Executes method to edit item attributes in the list and prints an error string if the user's edit command
     * inputs were incorrectly written.
     *
     * @param item The target item in which the user wants to edit.
     * @param oldItem The object containing the old attributes of the same item.
     * @param data The user input which contains the information to be used to update the item attributes.
     * @throws MissingParametersException Exception related to all errors due to missing parameters.
     * @throws NumberFormatException      Exception related to all invalid number formats inputted.
     * @throws OutOfRangeException        Exception related to out of range value errors.
     */
    public void updateItemInfo(final Item item, final Item oldItem, final String[] data) throws
            MissingParametersException, NumberFormatException, OutOfRangeException {
        try {
            handleUserEditCommands(item, oldItem, data);
        } catch (MissingParametersException mpe) {
            throw new MissingParametersException();
        } catch (NumberFormatException nfe) {
            throw new NumberFormatException();
        } catch (OutOfRangeException ore) {
            throw new OutOfRangeException();
        }
    }

    /**
     * Detects specific chars in the array of individual strings, and executes the change of item attribute values
     * (i.e, Name, Quantity, Price) based on the first few chars detected in the individual string.
     *
     * @param item The target item in which the user wants to edit.
     * @param oldItem The object containing the old attributes of the same item.
     * @param data The user input which contains the information to be used to update the item attributes.
     * @throws MissingParametersException Exception related to all errors due to missing parameters.
     * @throws NumberFormatException      Exception related to all invalid number formats inputted.
     * @throws OutOfRangeException        Exception related to out of range value errors.
     */
    private void handleUserEditCommands(Item item, Item oldItem, String[] data) throws
            MissingParametersException, NumberFormatException, OutOfRangeException {
        String currentLabel = NULL;
        try {
            validateUserEditCommands(data);
            for (int dataSequence = 1; dataSequence < data.length; dataSequence += 1) {
                currentLabel = makeEdits(item, data, currentLabel, dataSequence);
            }
        } catch (MissingParametersException mpe) {
            revertChanges(item, oldItem);
            throw new MissingParametersException();
        } catch (NumberFormatException nfe) {
            revertChanges(item, oldItem);
            throw new NumberFormatException();
        } catch (OutOfRangeException ore) {
            revertChanges(item, oldItem);
            throw new OutOfRangeException();
        }
    }

    /**
     * In the event that edits were not made due to errors, revert attributes back to old attributes.
     *
     * @param item The item whose attributes are to be edited.
     * @param oldItem The item containing the old attributes before the edit was made.
     */
    private void revertChanges(Item item, Item oldItem) {
        item.setName(oldItem.getName());
        item.setPrice(oldItem.getPrice());
        item.setQuantity(oldItem.getQuantity());
        item.setCategory(oldItem.getCategory());
    }

    /**
     * Make specific edits to an attribute based on the inputs of the user, which can range from quantity to price
     * to category and name.
     *
     * @param item The target item in which the user wants to edit.
     * @param data The user input which contains the information to be used to update the item attributes.
     * @param currentLabel The current attribute type being edited.
     * @param dataSequence The numerical index of the string array containing the user commands.
     * @return String containing the name of the attribute type currently being edited.
     * @throws MissingParametersException Exception related to all errors due to missing parameters.
     * @throws OutOfRangeException Exception related to out of range value errors.
     */
    private static String makeEdits(Item item, String[] data, String currentLabel, int dataSequence)
            throws MissingParametersException, OutOfRangeException {
        try{
            if (data[dataSequence].startsWith(NAME_LABEL)) {
                String newName = data[dataSequence].replaceFirst(NAME_LABEL, EMPTY_STRING);
                setItemName(item, newName);
                currentLabel = NAME_LABEL;
            } else if (data[dataSequence].startsWith(QUANTITY_LABEL)) {
                String updatedQuantity = data[dataSequence].replaceFirst(QUANTITY_LABEL, EMPTY_STRING);
                setItemQuantity(item, updatedQuantity);
                currentLabel = QUANTITY_LABEL;
            } else if (data[dataSequence].startsWith(PRICE_LABEL)) {
                String updatedPrice = data[dataSequence].replaceFirst(PRICE_LABEL, EMPTY_STRING);
                setItemPrice(item, updatedPrice);
                currentLabel = PRICE_LABEL;
            } else if (data[dataSequence].startsWith(CATEGORY_LABEL)) {
                String updatedCategory = data[dataSequence].replaceFirst(CATEGORY_LABEL, EMPTY_STRING);
                setItemCategory(item, updatedCategory);
                currentLabel = CATEGORY_LABEL;
            } else {
                handleMultiSpaceInputs(item, data, currentLabel, dataSequence);
            }
        } catch (OutOfRangeException ore) {
            throw new OutOfRangeException();
        } catch (MissingParametersException mpe) {
            throw new MissingParametersException();
        }
        return currentLabel;
    }

    /**
     * Ensures that the edit command formatting is valid before passing the input onwards for edit processing.
     *
     * @param data The user input which contains the information to be used to update the item attributes.
     * @throws MissingParametersException Exception related to all errors due to missing parameters.
     */
    private void validateUserEditCommands(String[] data) throws  MissingParametersException {
        int upcEditCount = ZERO;
        int nameEditCount = ZERO;
        int quantityEditCount = ZERO;
        int priceEditCount = ZERO;
        int categoryEditCount = ZERO;
        String currentLabel = NULL;
        for (int dataSequence = 1; dataSequence < data.length; dataSequence += 1) {
            if (data[dataSequence].startsWith(NAME_LABEL)) {
                nameEditCount += 1;
                currentLabel = NAME_LABEL;
            } else if (data[dataSequence].startsWith(QUANTITY_LABEL)) {
                quantityEditCount += 1;
                currentLabel = QUANTITY_LABEL;
            } else if (data[dataSequence].startsWith(PRICE_LABEL)) {
                priceEditCount += 1;
                currentLabel = PRICE_LABEL;
            } else if (data[dataSequence].startsWith(UPC_LABEL)) {
                upcEditCount += 1;
            } else if (data[dataSequence].startsWith(CATEGORY_LABEL)) {
                categoryEditCount += 1;
                currentLabel = CATEGORY_LABEL;
            } else {
                if (!currentLabel.equals(NAME_LABEL) && !currentLabel.equals(CATEGORY_LABEL)) {
                    throw new MissingParametersException();
                }
            }
        }
        if (nameEditCount > 1 || quantityEditCount > 1 || priceEditCount > 1 || categoryEditCount > 1
                || upcEditCount >= 1) {
            throw new MissingParametersException();
        }
    }

    /**
     * Handle user inputs with no parameters and only strings, provided that they are for name/category editing.
     *
     * @param item The target item in which the user wants to edit.
     * @param data The user input which contains the information to be used to update the item attributes.
     * @param currentLabel The current attribute type being edited.
     * @param dataSequence The numerical index of the string array containing the user commands.
     * @throws MissingParametersException Exception related to all errors due to missing parameters.
     */
    private static void handleMultiSpaceInputs(Item item, String[] data, String currentLabel, int dataSequence)
            throws MissingParametersException {
        if (currentLabel.equals(NAME_LABEL)) {
            item.setName(item.getName() + SPACING + data[dataSequence]);
        } else if (currentLabel.equals(CATEGORY_LABEL)) {
            CategoryCommand.removeItemFromCategory(item, item.getCategory());            
            item.setCategory(item.getCategory() + SPACING + data[dataSequence]);
            CategoryCommand.addItemToCategory(item.getCategory(), item);            
        } else {
            throw new MissingParametersException();
        }
    }

    /**
     * Sets the item name to a specific name according to the user's input if it is determined to be valid.
     *
     * @param item The target item in which the user wants to edit.
     * @param newName The new name to be assigned to the item.
     * @throws MissingParametersException Exception related to all errors due to missing parameters.
     */
    private static void setItemName(Item item, String newName) throws MissingParametersException {
        if (!newName.isBlank()) {
            CategoryCommand.removeItemFromCategory(item, item.getCategory());            
            item.setName(newName);
            CategoryCommand.addItemToCategory(item.getCategory(), item);            
        } else {
            throw new MissingParametersException();
        }
    }

    /**
     * Sets the item price to a specific value according to the user input.
     *
     * @param item         The target item in which the user wants to edit.
     * @param updatedPrice The new price of the item.
     * @throws NumberFormatException Exception related to all number conversion errors.
     * @throws OutOfRangeException Exception related to out of range value errors.
     */
    private static void setItemPrice(Item item, String updatedPrice) throws NumberFormatException,
            OutOfRangeException {
        try {
            double newPrice = Double.parseDouble(updatedPrice);
            BigDecimal newPriceRange = new BigDecimal(updatedPrice);
            if (newPrice >= MIN_VALUE_RANGE && newPrice <= Types.MAX_QTY) {
                CategoryCommand.removeItemFromCategory(item, item.getCategory());                
                item.setPrice(newPrice);
                CategoryCommand.addItemToCategory(item.getCategory(), item);                
            } else if (newPriceRange.compareTo(BigDecimal.valueOf(0.01)) < ZERO ||
                    newPriceRange.compareTo(BigDecimal.valueOf(Types.MAX_QTY)) > ZERO) {
                throw new OutOfRangeException();
            } else {
                throw new NumberFormatException();
            }
        } catch (NumberFormatException nfe) {
            throw new NumberFormatException();
        } catch (OutOfRangeException ore) {
            throw new OutOfRangeException();
        }
    }

    /**
     * Sets the item quantity to a specific value according to the user input.
     *
     * @param item            The target item in which the user wants to edit.
     * @param updatedQuantity The new quantity of the item.
     * @throws NumberFormatException Exception related to all number conversion errors.
     * @throws OutOfRangeException Exception related to out of range value errors.
     */
    private static void setItemQuantity(Item item, String updatedQuantity) throws NumberFormatException,
            OutOfRangeException {
        try {
            int newQuantity = Integer.parseInt(updatedQuantity);
            BigInteger newQuantityRange = new BigInteger(updatedQuantity);
            if (newQuantity >= MIN_VALUE_RANGE && newQuantity <= Types.MAX_QTY) {
                CategoryCommand.removeItemFromCategory(item, item.getCategory());
                item.setQuantity(newQuantity);
                CategoryCommand.addItemToCategory(item.getCategory(), item);
            } else if (newQuantityRange.compareTo(BigInteger.ONE) < ZERO ||
                    newQuantityRange.compareTo(BigInteger.valueOf(Types.MAX_QTY)) > ZERO) {
                throw new OutOfRangeException();
            } else {
                throw new NumberFormatException();
            }
        } catch (NumberFormatException nfe) {
            throw new NumberFormatException();
        } catch (OutOfRangeException ore) {
            throw new OutOfRangeException();
        }
    }

    /**
     * Sets the item's category to a specific category name according to the user's input if it is determined
     * to be valid.
     *
     * @param item The target item in which the user wants to edit.
     * @param updatedCategory The new category name to be assigned to the item.
     * @throws MissingParametersException Exception related to all errors due to missing parameters.
     */
    private static void setItemCategory(Item item, String updatedCategory) throws MissingParametersException {
        if (!updatedCategory.isBlank()) {
            CategoryCommand.removeItemFromCategory(item, item.getCategory());
            item.setCategory(updatedCategory);
            CategoryCommand.addItemToCategory(item.getCategory(), item);
        } else {
            throw new MissingParametersException();
        }
    }

    /**
     * Edit Command that searches for the item in the ArrayList and changes the item attributes according
     * to the wishes of the user.
     */
    public void setEditInfo() {
        try {
            Item updatedItem = retrieveItemFromHashMap(editInfo);
            Item oldItem = new Item(updatedItem);
            updateItemInfo(updatedItem, oldItem, editInfo);
            Item itemForHistory = new Item(updatedItem.getName(), updatedItem.getUpc(), updatedItem.getQuantity(),
                    updatedItem.getPrice(), updatedItem.getCategory());
            handleTrie(updatedItem, oldItem);
            upcCodes.remove(oldItem.getUpc());
            upcCodes.put(updatedItem.getUpc(), updatedItem);
            Ui.printEditDetails(oldItem, updatedItem);
            inventory.getAlertList().checkAlerts(updatedItem.getUpc(), updatedItem.getName(),
                    upcCodes.get(updatedItem.getUpc()).getQuantity().intValue());
            inventory.getUpcCodesHistory().get(oldItem.getUpc()).add(itemForHistory);
            if (SessionManager.getAutoSave()) {
                SessionManager.writeSession(inventory);
            }
        } catch (EditErrorException eee) {
            Ui.printItemNotFound();
        } catch (MissingParametersException mpe) {
            Ui.printInvalidEditCommand();
        } catch (NumberFormatException nfe) {
            Ui.printInvalidPriceOrQuantityEditInput();
        } catch (OutOfRangeException ore) {
            ore.printEditOutOfRange();
        }
    }

    /**
     * Updates the data structure responsible for storing information about the items found in the inventory list.
     *
     * @param updatedItem The item object containing the newest attributes of the specified item.
     * @param oldItem The previous attributes of the item are contained in this item object.
     */
    public void handleTrie(Item updatedItem, Item oldItem) {
        String[] oldItemNames = oldItem.getName().toLowerCase().split(SPACING);
        String newItemNamesFull = updatedItem.getName().toLowerCase();
        for (String oldItemName : oldItemNames) {
            if (!newItemNamesFull.contains(oldItemName) && itemNameHash.get(oldItemName).size() == 1) {
                itemNameHash.remove(oldItemName);
                itemsTrie.remove(oldItemName);
            } else {
                itemNameHash.get(oldItemName).remove(oldItem);
            }
        }
        String[] newItemNames = newItemNamesFull.split(SPACING);
        for (String newItemName : newItemNames) {
            if (!itemNameHash.containsKey(newItemName)) {
                itemNameHash.put(newItemName, new ArrayList<>());
            }
            itemNameHash.get(newItemName).add(updatedItem);
            itemsTrie.add(newItemName);
        }
    }

    /**
     * Executes the Edit Command
     */
    @Override
    public void run() {
        setEditInfo();
    }
}
