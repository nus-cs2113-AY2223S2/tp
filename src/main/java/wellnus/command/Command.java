package wellnus.command;

import java.util.HashMap;
import java.util.Map;

import wellnus.exception.BadCommandException;
import wellnus.exception.WellNusException;

/**
 * Superclass for all supported commands in Duke.<br>
 * <p>
 * Each Command is initialised with the arguments issued
 * by the user. Execute the specified Command by calling
 * execute().<br>
 * <p>
 * Child classes must provide the static isValidCommand() method for checking whether a set of
 * arguments are valid for a given command.
 */
public abstract class Command {
    private static final String ARGUMENT_DELIMITER = "--";
    private static final String DELIMITER_FOR_WORDS = " ";
    private static final String WEIRD_ARGUMENTS_GIVEN = "Weird arguments given for command, cannot continue";
    // Key: An argument's name. Value: An argument's provided value from the user
    private final HashMap<String, String> arguments;

    /**
     * Initialises a Command Object with the given arguments from the user
     *
     * @param arguments
     */
    public Command(HashMap<String, String> arguments) {
        // Arguments should never be null, or later code will call methods on a null reference
        assert arguments != null : WEIRD_ARGUMENTS_GIVEN;
        this.arguments = arguments;
    }

    protected HashMap<String, String> getArguments() {
        return this.arguments;
    }

    /**
     * Identifies this Command's keyword. Override this in subclasses so
     * toString() returns the correct String representation.
     *
     * @return String Keyword of this Command
     */
    protected abstract String getCommandKeyword();

    /**
     * Identifies the feature that this Command is associated with. Override
     * this in subclasses so toString() returns the correct String representation.
     *
     * @return String Keyword for the feature associated with this Command
     */
    protected abstract String getFeatureKeyword();

    /**
     * Executes the specified command from the user.<br>
     * <p>
     * May throw Exceptions if command fails.
     *
     * @throws WellNusException If command fails
     */
    public abstract void execute() throws WellNusException;

    /**
     * Very basic specialised toString() method for commands that returns
     * a formatted list of all arguments issued by the user.<br>
     * <p>
     * Example:
     * For the <code>hb add</code> command, toString() will output
     * <code>hb [add] [--name] &lt;habit name&gt;</code>
     *
     * @return String Representation of this Command that includes all given arguments
     */
    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        builder.append(this.getFeatureKeyword());
        builder.append(Command.DELIMITER_FOR_WORDS);
        builder.append(this.getCommandKeyword());
        for (Map.Entry<String, String> set : this.getArguments().entrySet()) {
            builder.append(Command.DELIMITER_FOR_WORDS);
            builder.append(Command.ARGUMENT_DELIMITER);
            builder.append(set.getKey());
            builder.append(Command.DELIMITER_FOR_WORDS);
            builder.append(set.getValue());
        }
        return builder.toString();
    }

    /**
     * Validate the arguments and payloads from a commandMap generated by CommandParser. <br>
     * <br>
     * The validation logic and strictness is up to the implementer. <br>
     * <br>
     * As a guideline, <code>isValidCommand</code> should minimally: <br>
     * <li>Verify that ALL MANDATORY arguments exist</li>
     * <li>Verify that ALL MANDATORY payloads exist</li>
     * <li>Safely verify the payload type (int, date, etc should be properly processed)</li>
     * <br>
     * Additionally, payload value cleanup (such as trimming) is also possible. <br>
     * As Java is pass (object reference) by value, any changes made to commandMap
     * will persist out of the function call.
     *
     * @param arguments Argument-Payload map generated by CommandParser
     * @throws BadCommandException If the arguments have any issues
     */
    public abstract void validateCommand(HashMap<String, String> arguments) throws BadCommandException;

    /**
     * Method to ensure that developers add in a command usage.
     * <p>
     * For example, for the 'add' command in AtomicHabit package: <br>
     * "usage: add --name (name of habit)"
     *
     * @return String of the proper usage of the habit
     */
    public abstract String getCommandUsage();

    /**
     * Method to ensure that developers add in a description for the command.
     * <p>
     * For example, for the 'add' command in AtomicHabit package: <br>
     * "add - add a habit to your list"
     *
     * @return String of the description of what the command does
     */
    public abstract String getCommandDescription();

}
