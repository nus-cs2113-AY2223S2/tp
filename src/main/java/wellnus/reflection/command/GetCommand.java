package wellnus.reflection.command;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

import wellnus.command.Command;
import wellnus.common.WellNusLogger;
import wellnus.exception.BadCommandException;
import wellnus.exception.StorageException;
import wellnus.reflection.feature.QuestionList;
import wellnus.reflection.feature.ReflectUi;
import wellnus.reflection.feature.ReflectionQuestion;

//@@author wenxin-c
/**
 * Command to get a set of 5 random questions.
 */
public class GetCommand extends Command {
    public static final String COMMAND_DESCRIPTION = "get - Get a list of questions to reflect on.";
    public static final String COMMAND_USAGE = "usage: get";
    public static final String COMMAND_KEYWORD = "get";
    private static final Logger LOGGER = WellNusLogger.getLogger("ReflectGetCommandLogger");
    private static final String FEATURE_NAME = "reflect";
    private static final String PAYLOAD = "";
    private static final String INVALID_COMMAND_MSG = "Invalid command issued, expected 'get'!";
    private static final String INVALID_ARGUMENT_MSG = "Invalid arguments given to 'get'!";
    private static final String INVALID_PAYLOAD = "Invalid payload given to 'get'!";
    private static final String INVALID_COMMAND_NOTES = "get command " + COMMAND_USAGE;
    private static final String COMMAND_KEYWORD_ASSERTION = "The key should be get.";
    private static final String COMMAND_PAYLOAD_ASSERTION = "The payload should be empty.";
    private static final String NUM_SELECTED_QUESTIONS_ASSERTION = "The number of selected questions should be 5.";
    private static final String STORAGE_ERROR = "Error saving to storage!";
    private static final String DOT = ".";
    private static final String EMPTY_STRING = "";
    private static final int NUM_OF_RANDOM_QUESTIONS = 5;
    private static final int ARGUMENT_PAYLOAD_SIZE = 1;
    private static final int ONE_OFFSET = 1;
    private static final ReflectUi UI = new ReflectUi();
    private Set<Integer> randomQuestionIndexes;
    private QuestionList questionList;

    /**
     * Set up the argument-payload pairs for this command.<br/>
     * Pass in a questionList object from ReflectionManager to access the list of questions.
     *
     * @param arguments Argument-payload pairs from users
     * @param questionList Object that contains the data about questions
     */
    public GetCommand(HashMap<String, String> arguments, QuestionList questionList) {
        super(arguments);
        this.questionList = questionList;
    }

    /**
     * Get the command itself.
     *
     * @return Command: get
     */
    @Override
    protected String getCommandKeyword() {
        return COMMAND_KEYWORD;
    }

    /**
     * Get the name of the feature in which this get command is generated.
     *
     * @return Feature name: reflect
     */
    @Override
    protected String getFeatureKeyword() {
        return FEATURE_NAME;
    }

    /**
     * Method to ensure that developers add in a command usage.
     * <p>
     * For example, for the 'add' command in AtomicHabit package: <br>
     * "usage: add --name (name of habit)"
     *
     * @return String of the proper usage of the habit
     */
    @Override
    public String getCommandUsage() {
        return COMMAND_USAGE;
    }

    /**
     * Method to ensure that developers add in a description for the command.
     * <p>
     * For example, for the 'add' command in AtomicHabit package: <br>
     * "add - add a habit to your list"
     *
     * @return String of the description of what the command does
     */
    @Override
    public String getCommandDescription() {
        return COMMAND_DESCRIPTION;
    }

    /**
     * Entry point to this command.<br/>
     * Trigger the generation of five random questions and print to users.<br/>
     */
    @Override
    public void execute() {
        try {
            validateCommand(getArguments());
        } catch (BadCommandException invalidCommand) {
            LOGGER.log(Level.INFO, INVALID_COMMAND_MSG);
            UI.printErrorFor(invalidCommand, INVALID_COMMAND_NOTES);
            return;
        }
        try {
            String outputString = convertQuestionsToString();
            UI.printOutputMessage(outputString);
        } catch (StorageException storageException) {
            LOGGER.log(Level.WARNING, STORAGE_ERROR);
            UI.printErrorFor(storageException, STORAGE_ERROR);
        }
    }

    /**
     * Validate the command.<br/>
     * <br/>
     * Conditions for command to be valid:<br/>
     * <li>Only one argument-payload pair
     * <li>The pair contains key: get
     * <li>Payload is empty
     * Whichever mismatch will cause the command to be invalid.
     *
     * @param commandMap Argument-Payload map generated by CommandParser
     * @throws BadCommandException If an invalid command is given
     */
    @Override
    public void validateCommand(HashMap<String, String> commandMap) throws BadCommandException {
        if (commandMap.size() != ARGUMENT_PAYLOAD_SIZE) {
            throw new BadCommandException(INVALID_ARGUMENT_MSG);
        } else if (!commandMap.containsKey(COMMAND_KEYWORD)) {
            throw new BadCommandException(INVALID_COMMAND_MSG);
        } else if (!commandMap.get(COMMAND_KEYWORD).equals(PAYLOAD)) {
            throw new BadCommandException(INVALID_PAYLOAD);
        }
        assert getArguments().containsKey(COMMAND_KEYWORD) : COMMAND_KEYWORD_ASSERTION;
        assert getArguments().get(COMMAND_KEYWORD).equals(PAYLOAD) : COMMAND_PAYLOAD_ASSERTION;
    }

    /**
     * Use questionList object to generate a set of 5 random integers(0-9) which will then be used as indexes to get
     * a set of 5 random questions.
     * <br/>
     * Each number num: num >= 0 and num <= (maxSize - 1)
     *
     * @return The selected sets of random questions
     */
    public ArrayList<ReflectionQuestion> getRandomQuestions() throws StorageException {
        questionList.setRandomQuestionIndexes();
        this.randomQuestionIndexes = questionList.getRandomQuestionIndexes();
        ArrayList<ReflectionQuestion> selectedQuestions = new ArrayList<>();
        ArrayList<ReflectionQuestion> questions = questionList.getAllQuestions();
        for (int index : this.randomQuestionIndexes) {
            selectedQuestions.add(questions.get(index));
        }
        assert selectedQuestions.size() == NUM_OF_RANDOM_QUESTIONS : NUM_SELECTED_QUESTIONS_ASSERTION;
        return selectedQuestions;
    }

    /**
     * Convert all five questions to a single string to be printed.
     *
     * @return Single string that consists of all questions
     */
    private String convertQuestionsToString() throws StorageException {
        ArrayList<ReflectionQuestion> selectedQuestions = getRandomQuestions();
        String questionString = EMPTY_STRING;
        for (int i = 0; i < selectedQuestions.size(); i += 1) {
            questionString += ((i + ONE_OFFSET) + DOT + selectedQuestions.get(i).toString()
                    + System.lineSeparator());
        }
        return questionString;
    }
}

