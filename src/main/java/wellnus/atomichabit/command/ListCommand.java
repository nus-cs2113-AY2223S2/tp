package wellnus.atomichabit.command;

import java.util.HashMap;

import wellnus.atomichabit.feature.AtomicHabit;
import wellnus.atomichabit.feature.AtomicHabitList;
import wellnus.atomichabit.feature.AtomicHabitManager;
import wellnus.atomichabit.feature.AtomicHabitUi;
import wellnus.command.Command;
import wellnus.exception.BadCommandException;


/**
 * The ListCommand class is a command class that lists all atomic habit in AtomicHabitList.<br>
 */
public class ListCommand extends Command {
    public static final String COMMAND_DESCRIPTION = "list - Lists out all the habits in your tracker.";
    public static final String COMMAND_USAGE = "usage: list";
    public static final String COMMAND_KEYWORD = "list";
    private static final int COMMAND_NUM_OF_ARGUMENTS = 1;
    private static final String COMMAND_INVALID_COMMAND_MESSAGE = "Invalid command issued, expected 'list'!";
    private static final String COMMAND_INVALID_ARGUMENTS_MESSAGE = "Invalid arguments given to 'list'!";
    private static final String COMMAND_INVALID_PAYLOAD = "Invalid payload given to 'list'!";
    private static final String LINE_SEPARATOR = System.lineSeparator();
    private static final String FIRST_STRING = "Here is the current accumulation of your atomic habits!"
            + LINE_SEPARATOR + "Keep up the good work and you will develop a helpful habit in no time";
    private static final String COMMAND_INVALID_COMMAND_NOTE = "list command " + COMMAND_USAGE;
    private static final String EMPTY_LIST_MESSAGE = "You have no habits in your list!"
            + LINE_SEPARATOR
            + "Start adding some habits by using 'add'!";
    private final AtomicHabitList atomicHabits;
    private final AtomicHabitUi atomicHabitUi;

    /**
     * Constructs an ListCommand object.<br>
     *
     * @param arguments    Argument-Payload map generated by CommandParser.
     * @param atomicHabits The AtomicHabitList object to get all atomic habit.
     */
    public ListCommand(HashMap<String, String> arguments, AtomicHabitList atomicHabits) {
        super(arguments);
        this.atomicHabits = atomicHabits;
        this.atomicHabitUi = new AtomicHabitUi();
    }

    private AtomicHabitUi getTextUi() {
        return atomicHabitUi;
    }

    /**
     * Identifies this Command's keyword. Override this in subclasses so
     * toString() returns the correct String representation.
     *
     * @return String Keyword of this Command
     */
    @Override
    protected String getCommandKeyword() {
        return COMMAND_KEYWORD;
    }

    /**
     * Identifies the feature that this Command is associated with. Override
     * this in subclasses so toString() returns the correct String representation.
     *
     * @return String Keyword for the feature associated with this Command
     */
    @Override
    protected String getFeatureKeyword() {
        return AtomicHabitManager.FEATURE_NAME;
    }

    /**
     * Executes the list command for atomic habits, which prints all atomic habits
     * added by the user so far.
     */
    @Override
    public void execute() {
        try {
            validateCommand(super.getArguments());
        } catch (BadCommandException badCommandException) {
            this.getTextUi().printErrorFor(badCommandException, COMMAND_INVALID_COMMAND_NOTE);
            return;
        }
        if (atomicHabits.getAllHabits().isEmpty()) {
            getTextUi().printOutputMessage(EMPTY_LIST_MESSAGE);
            return;
        }
        int taskNo = 1;
        int firstChar = 0;
        StringBuilder stringOfHabitsBuilder = new StringBuilder(FIRST_STRING + LINE_SEPARATOR);
        for (AtomicHabit habit : atomicHabits.getAllHabits()) {
            String currentHabitString = String.format("%d.%s [%d]",
                    taskNo, habit.toString(), habit.getCount());
            stringOfHabitsBuilder.append(currentHabitString).append(LINE_SEPARATOR);
            taskNo += 1;
        }
        String messageToUser = stringOfHabitsBuilder.substring(firstChar,
                stringOfHabitsBuilder.length() - 1);
        getTextUi().printOutputMessage(messageToUser);
    }

    /**
     * Validate the arguments and payloads from a commandMap generated by CommandParser.<br>
     * <p>
     * If no exceptions are thrown, arguments are valid.
     *
     * @param arguments Argument-Payload map generated by CommandParser
     * @throws BadCommandException If the commandMap has any issues
     */
    @Override
    public void validateCommand(HashMap<String, String> arguments) throws BadCommandException {
        if (arguments.size() != ListCommand.COMMAND_NUM_OF_ARGUMENTS) {
            throw new BadCommandException(ListCommand.COMMAND_INVALID_ARGUMENTS_MESSAGE);
        }
        if (!arguments.containsKey(ListCommand.COMMAND_KEYWORD)) {
            throw new BadCommandException(ListCommand.COMMAND_INVALID_COMMAND_MESSAGE);
        }
        if (arguments.get(COMMAND_KEYWORD) != "") {
            throw new BadCommandException(ListCommand.COMMAND_INVALID_PAYLOAD);
        }
    }

    /**
     * Method to ensure that developers add in a command usage.
     * <p>
     * For example, for the 'add' command in AtomicHabit package: <br>
     * "usage: add --name (name of habit)"
     *
     * @return String of the proper usage of the habit
     */
    @Override
    public String getCommandUsage() {
        return COMMAND_USAGE;
    }

    /**
     * Method to ensure that developers add in a description for the command.
     * <p>
     * For example, for the 'add' command in AtomicHabit package: <br>
     * "add - add a habit to your list"
     *
     * @return String of the description of what the command does
     */
    @Override
    public String getCommandDescription() {
        return COMMAND_USAGE;
    }
}

