package wellnus.atomichabit.command;

import java.util.HashMap;

import wellnus.atomichabit.feature.AtomicHabitManager;
import wellnus.atomichabit.feature.AtomicHabitUi;
import wellnus.command.Command;
import wellnus.exception.BadCommandException;
import wellnus.exception.WellNusException;

/**
 * The HomeCommand class is a command class that returns user back to the main WellNUS++ program.<br>
 */
public class HomeCommand extends Command {
    public static final String COMMAND_DESCRIPTION = "home - Return back to the main menu of WellNUS++.";
    public static final String COMMAND_USAGE = "usage: home";
    public static final String COMMAND_KEYWORD = "home";
    private static final int COMMAND_NUM_OF_ARGUMENTS = 1;
    private static final String COMMAND_INVALID_COMMAND_MESSAGE = "Invalid command issued, expected 'home'!";
    private static final String COMMAND_INVALID_ARGUMENTS = "Invalid arguments given to 'home'!";
    private static final String COMMAND_INVALID_PAYLOAD = "Invalid payload given to 'home'!";
    private static final String HOME_MESSAGE = "Thank you for using atomic habits. Do not forget about me!";
    private final AtomicHabitUi atomicHabitUi;

    /**
     * Constructs an HomeCommand object.<br>
     *
     * @param arguments Argument-Payload map generated by CommandParser.
     */
    public HomeCommand(HashMap<String, String> arguments) {
        super(arguments);
        this.atomicHabitUi = new AtomicHabitUi();
    }

    private AtomicHabitUi getTextUi() {
        return this.atomicHabitUi;
    }

    /**
     * Check if a HomeCommand is executed and user wants to return to home.
     *
     * @param command User command
     * @return true If user wants to exit feature false if not
     */
    public static boolean isExit(Command command) {
        return command instanceof HomeCommand;
    }

    /**
     * Identifies this Command's keyword. Override this in subclasses so
     * toString() returns the correct String representation.
     *
     * @return String Keyword of this Command
     */
    @Override
    protected String getCommandKeyword() {
        return COMMAND_KEYWORD;
    }

    /**
     * Identifies the feature that this Command is associated with. Override
     * this in subclasses so toString() returns the correct String representation.
     *
     * @return String Keyword for the feature associated with this Command
     */
    @Override
    protected String getFeatureKeyword() {
        return AtomicHabitManager.FEATURE_NAME;
    }

    /**
     * Prints the exit feature message for the atomic habits feature on the user's screen.
     */
    @Override
    public void execute() throws WellNusException {
        validateCommand(super.getArguments());
        getTextUi().printOutputMessage(HOME_MESSAGE);
    }

    /**
     * Validate the arguments and payloads from a commandMap generated by CommandParser <br>
     * <br>
     * The validation logic and strictness is up to the implementer. <br>
     * <br>
     * As a guideline, <code>isValidCommand</code> should minimally: <br>
     * <li>Verify that ALL MANDATORY arguments exist</li>
     * <li>Verify that ALL MANDATORY payloads exist</li>
     * <li>Safely verify the payload type (int, date, etc should be properly processed)</li>
     * <br>
     * Additionally, payload value cleanup (such as trimming) is also possible. <br>
     * As Java is pass (object reference) by value, any changes made to commandMap
     * will persist out of the function call.
     *
     * @param arguments Argument-Payload map generated by CommandParser
     * @throws BadCommandException if the commandMap has any issues
     */
    @Override
    public void validateCommand(HashMap<String, String> arguments) throws BadCommandException {
        if (arguments.size() != HomeCommand.COMMAND_NUM_OF_ARGUMENTS) {
            throw new BadCommandException(HomeCommand.COMMAND_INVALID_ARGUMENTS);
        }
        if (!arguments.containsKey(HomeCommand.COMMAND_KEYWORD)) {
            throw new BadCommandException(HomeCommand.COMMAND_INVALID_COMMAND_MESSAGE);
        }
        String payload = arguments.get(getCommandKeyword());
        if (!payload.isBlank()) {
            throw new BadCommandException(COMMAND_INVALID_PAYLOAD);
        }
    }

    /**
     * Method to ensure that developers add in a command usage.
     * <p>
     * For example, for the 'add' command in AtomicHabit package: <br>
     * "usage: add --name (name of habit)"
     *
     * @return String of the proper usage of the habit
     */
    @Override
    public String getCommandUsage() {
        return COMMAND_USAGE;
    }

    /**
     * Method to ensure that developers add in a description for the command.
     * <p>
     * For example, for the 'add' command in AtomicHabit package: <br>
     * "add - add a habit to your list"
     *
     * @return String of the description of what the command does
     */
    @Override
    public String getCommandDescription() {
        return COMMAND_DESCRIPTION;
    }
}


